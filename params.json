{"name":"Django distributed task","tagline":"Lightweight Django app for task delegation","body":"![tests](https://travis-ci.org/mrcrgl/django_distributed_task.svg)\r\n![tests](https://travis-ci.org/mrcrgl/django_distributed_task.svg)\r\n\r\n================\r\nDistributed Task\r\n================\r\n\r\nDistributed Task is a lightweight module for Django to delegate different jobs to worker processes.\r\nIt is useful for environments where celery is too overengeneered.\r\n\r\nDocs are available at: http://django-distributed-task.readthedocs.org/en/latest/index.html\r\nPyPi packaged: https://pypi.python.org/pypi/django_distributed_task\r\n\r\n\r\nInstallation\r\n============\r\n\r\nTo use distributed_task, a [Django](https://www.djangoproject.com/) installation is required.\r\n\r\nRequirements\r\n------------\r\n\r\nIt's well tested with following versions:\r\n\r\n`+-----------+---------------+---------------+\r\n| Version   | Python        | Django        |\r\n+-----------+---------------+---------------+\r\n| 1.0       | 2.7, 3.3, 3.4 | 1.5, 1.6, 1.7 |\r\n+-----------+---------------+---------------+`\r\n\r\nGet the code\r\n------------\r\n\r\ndjango_distributed_task package is available on `pip`:\r\n\r\n`pip install django_distributed_task`\r\n\r\n\r\nRegister app in your Django settings.py\r\n---------------------------------------\r\n\r\nAfter install, register ``distributed_task`` to your ``INSTALLED_APPS``::\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        \"distributed_task\",\r\n    )\r\n\r\nAnd finally ``sync`` your database:\r\n\r\n.. code-block:: bash\r\n\r\n    ./manage.py syncdb distributed_task\r\n\r\n\r\nOverview\r\n========\r\n\r\nIn between of `celery <https://github.com/celery/celery>`, distributed_task is extremely lightweight.\r\nWe'd decided to keep it simple with less of flexibility but straight at the needs.\r\nJust define for each method a `task`-method using the decorator and delay it at run time.\r\n\r\nUse case\r\n--------\r\n\r\nThe goal is to prevent \"heavy\" tasks to be executed between a web request and it's response.\r\n\r\nExamples for those tasks are:\r\n\r\n* Sending e-mails.\r\n* Generation of pdf/csv/... files.\r\n* Rendering of images, videos.\r\n\r\n\r\nUsage\r\n=====\r\n\r\nThe default call scheme is:\r\n    Task.delay -> Broker -> Worker -> Execution\r\n\r\n\r\nTasks\r\n-----\r\n\r\ndistributed_task will check in every installed app (``INSTALLED_APPS``) for a ``tasks.py`` file.\r\n\r\nDefine your first task\r\n----------------------\r\n\r\nCreate a ``tasks.py`` file in your desired app of choice::\r\n\r\n    from distributed_task import register_task\r\n\r\n    @register_task\r\n    def my_heavy_task_method():\r\n        pass\r\n\r\n\r\nCall your task\r\n--------------\r\n\r\nThe decorator adds a ``delay`` method to your task. You can decide in runtime if you'd like to\r\nexecute the task delayed or immediately.\r\n\r\nExecute delayed in a worker process::\r\n\r\n    my_heavy_task_method.delay(*args, **kwargs)\r\n\r\n\r\nDefault method execution (bypasses task distribution)::\r\n\r\n    my_heavy_task_method(*args, **kwargs)\r\n\r\n\r\nArguments\r\n---------\r\n\r\nYou can pass all args/kwargs to the ``my_heavy_task_method.delay`` method as you would call it normally.\r\nThe serializer is also able to handle Django model instances but not QuerySets.\r\n\r\nThis works fine::\r\n\r\n    instance = User.objects.first()\r\n\r\n    my_heavy_task_method.delay('arg 1', user=instance, some_other_arg=False, some_float=12.5212)\r\n\r\nResponse / Return values\r\n------------------------\r\n\r\nMethod return values are not available. Maybe in a further version.\r\n\r\n\r\nUpcoming versions\r\n=================\r\n\r\nThese features/changes are in plan:\r\n\r\nVersion 1.1\r\n-----------\r\n\r\n* enhance worker process handling\r\n* worker support for cron execution\r\n* worker daemon support\r\n* worker multiprocessing support\r\n* database broker support (for testing and those environments without RabbitMQ or other messaging system)","google":"UA-51277909-2","note":"Don't delete this file! It's used internally to help with page regeneration."}